{"version":3,"sources":["gql/TodoListGQL.js","components/TodoLists/TodoListsList.js","gql/TodoItemGQL.js","gql/AuthGQL.js","utilities/useToggle.js","components/Global/PrimaryLayout.js","components/Global/Loading.js","components/Global/Error.js","components/TodoLists/CreateTodoList.js","components/TodoLists/DeleteTodoList.js","components/TodoLists/UpdateTodoListButtons.js","components/TodoLists/UpdateTodoList.js","components/TodoItems/DeleteTodoItem.js","components/TodoItems/TodoItem.js","components/TodoItems/TodoItemList.js","components/TodoItems/utilities/useSortCompleted.js","components/TodoItems/CreateTodoItem.js","components/TodoLists/TodoListActions.js","pages/HomePage.js","pages/TodoListDetailPage.js","components/Auth/Login.js","pages/LoginPage.js","App.js","serviceWorker.js","styling/theme.js","index.js"],"names":["GET_TODO_LISTS","gql","GET_TODO_LIST","CREATE_TODO_LIST","UPDATE_TODO_LIST","DELETE_TODO_LIST","useStyles","makeStyles","theme","todoListContainer","maxWidth","todoList","padding","spacing","TodoListsList","todoLists","classes","Grid","container","className","map","list","key","id","item","xs","component","Link","to","Paper","Typography","variant","align","title","CREATE_TODO_ITEM","DELETE_TODO_ITEM","MARK_TODO_ITEM_COMPLETE_INCOMPLETE","LOGIN_MUT","useToggle","initial","useState","isShowing","setIsShowing","toggle","root","position","margin","borderRadius","width","height","header","marginTop","paddingTop","paddingBottom","paddingLeft","paddingRight","heading","display","childrenDiv","marginBottom","PrimaryLayout","props","elevation","color","children","justifyContent","alignItems","Loading","CircularProgress","Error","errorMessage","open","setOpen","Backdrop","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","window","location","reload","form","CreateTodoList","newListName","setNewListName","useMutation","createTodoList","error","handleComplete","message","size","fullWidth","onSubmit","e","preventDefault","variables","refetchQueries","query","onCompleted","handleSubmit","TextField","label","value","onChange","target","type","DeleteTodoList","isActive","setIsActive","params","useParams","deleteTodoList","handleCompleted","navigate","ClickAwayListener","onClickAway","handleDelete","UpdateTodoListButtons","deleteActive","setDeleteActive","headingContainer","formContainer","textTransform","textInput","marginRight","submit","marginLeft","UpdateTodoList","toggleCreateButton","newTitle","setNewTitle","isShowingEdit","toggleEdit","updateTodoList","handleEditClick","gutterBottom","IconButton","autoFocus","DeleteTodoItem","todoListId","deleteTodoItem","flexDirection","paperDiv","completed","textDecoration","completedBy","fontStyle","palette","grey","fontSize","TodoItem","todoItem","markTodoItemCompleteIncomplete","Checkbox","checked","isCompleted","itemName","CardActions","username","incompleteList","showCompleted","TodoItemList","todoItems","completeItems","incompleteItems","push","useSortCompleted","CreateTodoItem","createButtonShowing","newItemName","setNewItemName","createTodoItem","TodoListActions","HomePage","useQuery","data","loading","listContainer","TodoListDetailPage","loginForm","Login","setUsername","password","setPassword","tokenAuth","client","useApolloClient","a","loginCompleted","res","localStorage","setItem","token","writeData","isLoggedIn","LoginPage","App","path","Boolean","hostname","match","createMuiTheme","cache","InMemoryCache","ApolloClient","uri","fetchOptions","credentials","request","operation","getItem","setContext","headers","Authorization","clientState","defaults","IS_LOGGED_IN","InitialLogin","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.043bb92e.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\n// Queries\n\nexport const GET_TODO_LISTS = gql`\n  query {\n    todoLists {\n      id\n      title\n    }\n  }\n`;\n\nexport const GET_TODO_LIST = gql`\n  query($id: Int!) {\n    todoList(id: $id) {\n      id\n      title\n      todoItems {\n        id\n        itemName\n        itemWorth\n        isCompleted\n        completedBy {\n          id\n          username\n        }\n        completedDate\n      }\n    }\n  }\n`;\n\n// Mutations\n\nexport const CREATE_TODO_LIST = gql`\n  mutation($title: String!) {\n    createTodoList(title: $title) {\n      todoList {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const UPDATE_TODO_LIST = gql`\n  mutation($id: Int!, $title: String!) {\n    updateTodoList(id: $id, title: $title) {\n      todoList {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const DELETE_TODO_LIST = gql`\n  mutation($id: Int!) {\n    deleteTodoList(id: $id) {\n      id\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nimport { makeStyles, Grid, Paper, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  todoListContainer: {\n    maxWidth: \"100%\",\n  },\n  todoList: {\n    padding: theme.spacing(2),\n  },\n}));\n\nexport const TodoListsList = ({ todoLists }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.todoListContainer}>\n      {todoLists.map((list) => (\n        <Grid\n          key={list.id}\n          item\n          xs={12}\n          component={Link}\n          to={`todolist/${list.id}`}\n        >\n          <Paper className={classes.todoList}>\n            <Typography variant=\"h6\" align=\"center\">\n              {list.title}\n            </Typography>\n          </Paper>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","import { gql } from \"apollo-boost\";\n\n// Queries\n\nexport const GET_TODO_ITEMS = gql`\n  query {\n    todoItems {\n      id\n      itemName\n      itemWorth\n      isCompleted\n      todoList {\n        id\n        title\n      }\n      completedDate\n      completedBy {\n        id\n        username\n      }\n    }\n  }\n`;\n\nexport const GET_TODO_ITEM = gql`\n  query($id: Int!) {\n    todoItem(id: $id) {\n      id\n      itemName\n      itemWorth\n      isCompleted\n      completedDate\n      completedBy {\n        id\n        username\n      }\n    }\n  }\n`;\n\n// Mutations\n\nexport const CREATE_TODO_ITEM = gql`\n  mutation($itemName: String!, $todoListId: Int!, $itemWorth: Int) {\n    createTodoItem(\n      itemName: $itemName\n      todoListId: $todoListId\n      itemWorth: $itemWorth\n    ) {\n      todoItem {\n        id\n        itemName\n        createdBy {\n          username\n        }\n        createdDate\n        completedDate\n        completedBy {\n          id\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const UPDATE_TODO_ITEM = gql`\n  mutation($id: Int!, $itemName: String, $todoListId: Int, $itemWorth: Int) {\n    updateTodoItem(\n      id: $id\n      itemName: $itemName\n      todoListId: $todoListId\n      itemWorth: $itemWorth\n    ) {\n      todoItem {\n        id\n        itemName\n        createdBy {\n          username\n        }\n        createdDate\n        completedDate\n        completedBy {\n          id\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const DELETE_TODO_ITEM = gql`\n  mutation($id: Int!) {\n    deleteTodoItem(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const MARK_TODO_ITEM_COMPLETE_INCOMPLETE = gql`\n  mutation($id: Int!) {\n    markTodoItemCompleteIncomplete(id: $id) {\n      todoItem {\n        id\n        itemName\n        createdBy {\n          username\n        }\n        createdDate\n        completedDate\n        completedBy {\n          id\n          username\n        }\n      }\n    }\n  }\n`;\n","import { gql } from \"apollo-boost\";\n\nexport const LOGIN_MUT = gql`\n  mutation($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n","import { useState } from \"react\";\n\nexport const useToggle = (initial) => {\n  const [isShowing, setIsShowing] = useState(initial || false);\n\n  const toggle = () => {\n    setIsShowing(!isShowing);\n  };\n\n  return {\n    isShowing,\n    toggle,\n  };\n};\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nimport { makeStyles, Paper, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    margin: 0,\n    padding: theme.spacing(0),\n    borderRadius: 0,\n    width: \"100%\",\n    height: \"100vh\",\n  },\n  header: {\n    marginTop: 0,\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    borderRadius: 0,\n  },\n  heading: {\n    display: \"block\",\n  },\n  childrenDiv: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nexport const PrimaryLayout = (props) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Paper className={classes.root} elevation={0}>\n        <Paper className={classes.header}>\n          <Typography\n            className={classes.heading}\n            variant=\"h4\"\n            color=\"primary\"\n            component={Link}\n            to=\"/\"\n          >\n            Do Shit\n          </Typography>\n        </Paper>\n        <div className={classes.childrenDiv}>{props.children}</div>\n      </Paper>\n    </>\n  );\n};\n","import React from \"react\";\nimport { makeStyles, CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"50px;\",\n  },\n});\n\nexport const Loading = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress className={classes.root} color=\"primary\" />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport {\n  Backdrop,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n} from \"@material-ui/core\";\n\nexport const Error = ({ errorMessage }) => {\n  const [open, setOpen] = useState(true);\n\n  return (\n    <Backdrop open={open}>\n      <Dialog open={open}>\n        <DialogTitle>An Error Occured</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{errorMessage}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpen(!open)}>Close</Button>\n          <Button color=\"primary\" onClick={() => window.location.reload()}>\n            Reload\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Backdrop>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { makeStyles, Button, Paper, TextField } from \"@material-ui/core\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_TODO_LIST, GET_TODO_LISTS } from \"../../gql\";\n\nimport { useToggle } from \"../../utilities\";\nimport { Error } from \"../Global\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n  },\n  form: {\n    padding: theme.spacing(2),\n    \"& > *\": {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport const CreateTodoList = () => {\n  const { isShowing, toggle } = useToggle();\n  const [newListName, setNewListName] = useState(\"\");\n\n  const [createTodoList, { error }] = useMutation(CREATE_TODO_LIST);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createTodoList({\n      variables: { title: newListName },\n      refetchQueries: [{ query: GET_TODO_LISTS }],\n      onCompleted: handleComplete(),\n    });\n  };\n\n  const handleComplete = () => {\n    setNewListName(\"\");\n    toggle();\n  };\n\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {error && <Error errorMessage={error.message} />}\n      <Button\n        size=\"medium\"\n        color={isShowing ? \"secondary\" : \"primary\"}\n        variant={isShowing ? \"outlined\" : \"contained\"}\n        fullWidth\n        onClick={toggle}\n      >\n        {isShowing ? \"Close\" : \"Create List\"}\n      </Button>\n      {isShowing && (\n        <Paper variant=\"outlined\">\n          <form className={classes.form} onSubmit={(e) => handleSubmit(e)}>\n            <TextField\n              color=\"primary\"\n              variant=\"outlined\"\n              label=\"List Name\"\n              fullWidth\n              value={newListName}\n              onChange={(e) => setNewListName(e.target.value)}\n            />\n            <Button\n              type=\"submit\"\n              size=\"large\"\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n            >\n              Create\n            </Button>\n          </form>\n        </Paper>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { navigate, useParams } from \"@reach/router\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { DELETE_TODO_LIST, GET_TODO_LISTS } from \"../../gql\";\n\nimport { Button, ClickAwayListener } from \"@material-ui/core\";\n\nimport { Error } from \"../Global\";\n\nexport const DeleteTodoList = ({ isActive, setIsActive }) => {\n  const params = useParams();\n  const [deleteTodoList, { error }] = useMutation(DELETE_TODO_LIST);\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n    deleteTodoList({\n      variables: { id: params.id },\n      refetchQueries: [{ query: GET_TODO_LISTS }],\n      onCompleted: handleCompleted(),\n    });\n  };\n\n  const handleCompleted = () => {\n    navigate(\"/\");\n  };\n  return (\n    <>\n      {error && <Error errorMessage={error.message} />}\n      {isActive ? (\n        <ClickAwayListener onClickAway={() => setIsActive(!isActive)}>\n          <Button\n            type=\"medium\"\n            variant=\"contained\"\n            color=\"secondary\"\n            fullWidth\n            onClick={(e) => handleDelete(e)}\n          >\n            Delete\n          </Button>\n        </ClickAwayListener>\n      ) : (\n        <Button\n          type=\"medium\"\n          variant=\"outlined\"\n          fullWidth\n          onClick={(e) => setIsActive(!isActive)}\n        >\n          Delete\n        </Button>\n      )}\n    </>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { DeleteTodoList } from \"./DeleteTodoList\";\nimport { Grid, Button } from \"@material-ui/core\";\n\nexport const UpdateTodoListButtons = ({ toggle }) => {\n  const [deleteActive, setDeleteActive] = useState(false);\n\n  return (\n    <Grid container>\n      <Grid item xs={6}>\n        <DeleteTodoList isActive={deleteActive} setIsActive={setDeleteActive} />\n      </Grid>\n      <Grid item xs={6}>\n        <Button variant=\"contained\" fullWidth onClick={toggle}>\n          Cancel\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useParams } from \"@reach/router\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UPDATE_TODO_LIST } from \"../../gql/TodoListGQL\";\n\nimport {\n  makeStyles,\n  Typography,\n  TextField,\n  ClickAwayListener,\n  IconButton,\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\nimport { useToggle } from \"../../utilities\";\nimport { Error } from \"../Global\";\nimport { UpdateTodoListButtons } from \"./UpdateTodoListButtons\";\n\nconst useStyles = makeStyles((theme) => ({\n  headingContainer: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(3),\n  },\n  formContainer: {\n    marginBottom: theme.spacing(3),\n  },\n  title: {\n    textTransform: \"uppercase\",\n  },\n  textInput: {\n    marginRight: theme.spacing(1),\n  },\n  submit: {\n    marginLeft: theme.spacing(1),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n  },\n}));\n\nexport const UpdateTodoList = ({ title, toggleCreateButton }) => {\n  const params = useParams();\n  const [newTitle, setNewTitle] = useState(title);\n  const { isShowing: isShowingEdit, toggle: toggleEdit } = useToggle();\n\n  const [updateTodoList, { error }] = useMutation(UPDATE_TODO_LIST);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    updateTodoList({\n      variables: { id: params.id, title: newTitle },\n      onCompleted: handleEditClick(),\n    });\n  };\n\n  const handleClickAway = () => {\n    setNewTitle(title);\n    handleEditClick();\n  };\n\n  const handleEditClick = () => {\n    toggleEdit();\n    toggleCreateButton();\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      {error && <Error errorMessage={error.message} />}\n      {!isShowingEdit && (\n        <div className={classes.headingContainer}>\n          <Typography variant=\"h5\" className={classes.title} gutterBottom>\n            {title}\n          </Typography>\n          <IconButton color=\"secondary\" onClick={handleEditClick}>\n            <EditIcon />\n          </IconButton>\n        </div>\n      )}\n      {isShowingEdit && (\n        <ClickAwayListener onClickAway={handleClickAway}>\n          <div className={classes.formContainer}>\n            <form\n              className={classes.headingContainer}\n              onSubmit={(e) => handleSubmit(e)}\n            >\n              <TextField\n                className=\"textInput\"\n                color=\"secondary\"\n                value={newTitle}\n                onChange={(e) => setNewTitle(e.target.value)}\n                fullWidth\n                autoFocus\n              />\n\n              <IconButton\n                className={classes.submit}\n                color=\"secondary\"\n                type=\"submit\"\n              >\n                <DoneIcon />\n              </IconButton>\n            </form>\n            <UpdateTodoListButtons toggle={handleEditClick} />\n          </div>\n        </ClickAwayListener>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { DELETE_TODO_ITEM, GET_TODO_LIST } from \"../../gql\";\n\nimport { IconButton } from \"@material-ui/core\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n\nimport { Error } from \"../Global\";\n\nexport const DeleteTodoItem = ({ id, todoListId }) => {\n  const [deleteTodoItem, { error }] = useMutation(DELETE_TODO_ITEM);\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n    deleteTodoItem({\n      variables: { id: id },\n      refetchQueries: [{ query: GET_TODO_LIST, variables: { id: todoListId } }],\n    });\n  };\n\n  return (\n    <>\n      {error && <Error errorMessage={error.message} />}\n      <IconButton onClick={(e) => handleDelete(e)}>\n        <CancelIcon />\n      </IconButton>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"@reach/router\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { MARK_TODO_ITEM_COMPLETE_INCOMPLETE } from \"../../gql/TodoItemGQL\";\nimport { GET_TODO_LIST } from \"../../gql/TodoListGQL\";\n\nimport { Error } from \"../Global\";\nimport { DeleteTodoItem } from \"./DeleteTodoItem\";\n\nimport {\n  makeStyles,\n  Paper,\n  Checkbox,\n  Typography,\n  CardActions,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginTop: theme.spacing(1),\n  },\n  paperDiv: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n  },\n  completed: {\n    textDecoration: \"line-through\",\n  },\n  completedBy: {\n    fontStyle: \"italic\",\n    color: theme.palette.grey[500],\n    fontSize: \".85em\",\n  },\n}));\n\nexport const TodoItem = ({ todoItem }) => {\n  const params = useParams();\n  const [markTodoItemCompleteIncomplete, { error }] = useMutation(\n    MARK_TODO_ITEM_COMPLETE_INCOMPLETE\n  );\n\n  const handleCheck = () => {\n    markTodoItemCompleteIncomplete({\n      variables: { id: todoItem.id },\n      refetchQueries: [{ query: GET_TODO_LIST, variables: { id: params.id } }],\n    });\n  };\n\n  const classes = useStyles();\n  return (\n    <Paper className={classes.root} elevation={0} variant=\"outlined\">\n      {error && <Error errorMessage={error.message} />}\n      <div className={classes.paperDiv}>\n        <span>\n          <Checkbox\n            color=\"primary\"\n            onChange={handleCheck}\n            checked={todoItem.isCompleted}\n          />\n          <Typography\n            className={todoItem.isCompleted ? classes.completed : \"\"}\n            variant=\"body1\"\n            display=\"inline\"\n          >\n            {todoItem.itemName}\n          </Typography>\n        </span>\n        <CardActions>\n          <DeleteTodoItem id={todoItem.id} todoListId={params.id} />\n        </CardActions>\n      </div>\n      {todoItem.completedBy && (\n        <Typography\n          className={classes.completedBy}\n        >{`Compeleted By: ${todoItem.completedBy.username}`}</Typography>\n      )}\n    </Paper>\n  );\n};\n","import React from \"react\";\n\nimport { makeStyles, Grid, Button } from \"@material-ui/core\";\n\nimport { TodoItem } from \"./TodoItem\";\nimport { useSortCompleted } from \"./utilities\";\nimport { useToggle } from \"../../utilities\";\n\nconst useStyles = makeStyles((theme) => ({\n  incompleteList: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  showCompleted: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n}));\n\nexport const TodoItemList = ({ todoItems }) => {\n  const [completeItems, incompleteItems] = useSortCompleted(todoItems);\n  const { isShowing, toggle } = useToggle();\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid container className={classes.incompleteList}>\n        {incompleteItems.map((item) => (\n          <Grid item key={item.id} xs={12}>\n            <TodoItem todoItem={item} />\n          </Grid>\n        ))}\n      </Grid>\n      <Grid container>\n        <Grid item xs={12} className={classes.showCompleted}>\n          <Button color=\"secondary\" onClick={toggle}>\n            {isShowing ? \"Hide Completed\" : \"Show Completed\"}\n          </Button>\n        </Grid>\n        {isShowing && (\n          <>\n            {completeItems.map((item) => (\n              <Grid item key={item.id} xs={12}>\n                <TodoItem todoItem={item} />\n              </Grid>\n            ))}\n          </>\n        )}\n      </Grid>\n    </>\n  );\n};\n","export const useSortCompleted = (todoItems) => {\n  const completeItems = [];\n  const incompleteItems = [];\n\n  todoItems.map((item) =>\n    item.isCompleted ? completeItems.push(item) : incompleteItems.push(item)\n  );\n\n  return [completeItems, incompleteItems];\n};\n","import React, { useState } from \"react\";\n\nimport { makeStyles, Button, Paper, TextField } from \"@material-ui/core\";\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_TODO_ITEM, GET_TODO_LIST } from \"../../gql\";\n\nimport { useToggle } from \"../../utilities\";\nimport { Error } from \"../Global\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    \"& > *\": {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport const CreateTodoItem = ({ todoListId, createButtonShowing }) => {\n  const { isShowing, toggle } = useToggle();\n  const [newItemName, setNewItemName] = useState(\"\");\n\n  const [createTodoItem, { error }] = useMutation(CREATE_TODO_ITEM);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    createTodoItem({\n      variables: { itemName: newItemName, todoListId: todoListId },\n      refetchQueries: [{ query: GET_TODO_LIST, variables: { id: todoListId } }],\n      onCompleted: handleComplete(),\n    });\n  };\n\n  const handleComplete = () => {\n    setNewItemName(\"\");\n    toggle();\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      {error && <Error errorMessage={error.message} />}\n      {createButtonShowing && (\n        <Button\n          size=\"medium\"\n          color={isShowing ? \"secondary\" : \"primary\"}\n          variant={isShowing ? \"outlined\" : \"contained\"}\n          fullWidth\n          onClick={toggle}\n        >\n          {isShowing ? \"Close\" : \"Add Item\"}\n        </Button>\n      )}\n      {isShowing && (\n        <Paper variant=\"outlined\">\n          <form className={classes.root} onSubmit={(e) => handleSubmit(e)}>\n            <TextField\n              color=\"primary\"\n              variant=\"outlined\"\n              label=\"Item Name\"\n              fullWidth\n              value={newItemName}\n              onChange={(e) => setNewItemName(e.target.value)}\n            />\n            <Button\n              type=\"submit\"\n              size=\"large\"\n              color=\"primary\"\n              fullWidth\n              variant=\"contained\"\n            >\n              Add\n            </Button>\n          </form>\n        </Paper>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { UpdateTodoList } from \"./UpdateTodoList\";\nimport { CreateTodoItem } from \"../TodoItems\";\nimport { useToggle } from \"../../utilities\";\n\nexport const TodoListActions = ({ title, todoListId }) => {\n  const { isShowing, toggle } = useToggle(true);\n  return (\n    <>\n      <UpdateTodoList title={title} toggleCreateButton={toggle} />\n      <CreateTodoItem todoListId={todoListId} createButtonShowing={isShowing} />\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_TODO_LISTS } from \"../gql/TodoListGQL\";\n\nimport { makeStyles, Grid } from \"@material-ui/core\";\n\nimport { TodoListsList, CreateTodoList } from \"../components/TodoLists\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport const HomePage = () => {\n  const { data, loading, error } = useQuery(GET_TODO_LISTS);\n\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      {loading && <h2>Loading...</h2>}\n      {error && <h2>Error</h2>}\n      {data && (\n        <Grid container>\n          <Grid item xs={12}>\n            <CreateTodoList />\n          </Grid>\n          <Grid item xs={12}>\n            <TodoListsList todoLists={data.todoLists} />\n          </Grid>\n        </Grid>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"@reach/router\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_TODO_LIST } from \"../gql/TodoListGQL\";\n\nimport { makeStyles } from \"@material-ui/core\";\n\nimport { Loading, Error } from \"../components/Global\";\nimport { TodoListActions } from \"../components/TodoLists\";\nimport { TodoItemList } from \"../components/TodoItems\";\n\nconst useStyles = makeStyles((theme) => ({\n  listContainer: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  headingContainer: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(3),\n  },\n  title: {\n    textTransform: \"uppercase\",\n  },\n}));\n\nexport const TodoListDetailPage = () => {\n  const params = useParams();\n\n  const { data, loading, error } = useQuery(GET_TODO_LIST, {\n    variables: { id: params.id },\n  });\n\n  const classes = useStyles();\n  return (\n    <div>\n      {loading && <Loading />}\n      {error && <Error errorMessage={error.message} />}\n      {data && (\n        <div className={classes.listContainer}>\n          <TodoListActions title={data.todoList.title} todoListId={params.id} />\n          <TodoItemList todoItems={data.todoList.todoItems} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"@reach/router\";\n\nimport {\n  makeStyles,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\n\nimport { LOGIN_MUT } from \"../../gql\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\n\nimport { Error } from \"../Global\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n  loginForm: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    \"& > *\": {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport const Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [tokenAuth, { error }] = useMutation(LOGIN_MUT);\n  const client = useApolloClient();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const res = await tokenAuth({\n      variables: { username, password },\n      onCompleted: loginCompleted(),\n    });\n    localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    client.writeData({ data: { isLoggedIn: true } });\n    navigate(\"/\");\n  };\n\n  const loginCompleted = () => {\n    setUsername(\"\");\n    setPassword(\"\");\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Paper className={classes.root}>\n        <Typography variant=\"h3\">Login</Typography>\n        <form className={classes.loginForm} onSubmit={(e) => handleSubmit(e)}>\n          <TextField\n            color=\"primary\"\n            variant=\"outlined\"\n            label=\"Username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <TextField\n            color=\"primary\"\n            type=\"password\"\n            variant=\"outlined\"\n            label=\"Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </form>\n      </Paper>\n      {error && <Error errorMessage={error.message} />}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { Login } from \"../components/Auth\";\n\nexport const LoginPage = () => {\n  return <Login />;\n};\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Router } from \"@reach/router\";\nimport { HomePage, TodoListDetailPage, LoginPage } from \"./pages\";\nimport { PrimaryLayout } from \"./components/Global\";\n\nfunction App() {\n  return (\n    <PrimaryLayout>\n      <Router>\n        <HomePage path=\"/\" />\n        <LoginPage path=\"login/\" />\n        <TodoListDetailPage path=\"todolist/:id/\" />\n      </Router>\n    </PrimaryLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Login } from \"./components/Auth/Login\";\nimport { PrimaryLayout } from \"./components/Global\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./styling/theme\";\n\nimport { useQuery, ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst cache = new InMemoryCache();\n\nconst uri = \"http://localhost:8000/graphql/\";\n\nexport const client = new ApolloClient({\n  cache,\n  uri,\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  request: (operation) => {\n    const token = localStorage.getItem(\"authToken\") || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n  },\n  clientState: {\n    defaults: {\n      isLoggedIn: !!localStorage.getItem(\"authToken\"),\n    },\n  },\n});\n\nexport const IS_LOGGED_IN = gql`\n  {\n    isLoggedIn @client\n  }\n`;\n\nconst InitialLogin = () => {\n  const { data } = useQuery(IS_LOGGED_IN);\n  return (\n    <>\n      {data && data.isLoggedIn ? (\n        <App />\n      ) : (\n        <PrimaryLayout>\n          <Login />\n        </PrimaryLayout>\n      )}\n    </>\n  );\n};\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <InitialLogin />\n    </ThemeProvider>\n  </ApolloProvider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}